import logging
import asyncio
import Random as Rn
import re
from prettytable import PrettyTable
from BotToken import token
from AdminPassword import Admin_Password

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Location
import markups as nav
import mysql.connector
import sqlite3 as sq

from getpass import getpass
from mysql.connector import connect, Error

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message


class MyStates(StatesGroup):
    waiting_for_review = State()

class AdminStates(StatesGroup):
    pass_state = State()
    createApplication = State()
    waiting_for_phone_number = State()
    history_application = State()
    change_application = State()
    waiting_for_change = State()
    change_status_ready = State()
    phone_reg = State()
    createTovar = State()
    change_status_one = State()
    change_itog_ready = State()
    change_itog_otdan = State()




# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # –ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.', reply_markup=nav.back_application_send)
    await AdminStates.phone_reg.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è phone_reg
@dp.message_handler(state=AdminStates.phone_reg, content_types=types.ContentTypes.CONTACT)
async def save_send_phone_status(message: types.Message, state: FSMContext):
    if message.contact is not None and message.contact.user_id == message.from_user.id:
        user_data = (message.chat.id, message.from_user.last_name, message.from_user.first_name, message.contact.phone_number)
        with sq.connect('sq_baze/Users/users.db') as con:
            cur = con.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS users(
                id INTEGER PRIMARY KEY,
                last_name TEXT,
                first_name TEXT,
                phone_number TEXT UNIQUE
            )""")
            cur.execute("INSERT OR IGNORE INTO users (id, last_name, first_name, phone_number) VALUES (?,?,?,?);", user_data)
            con.commit()
        await message.reply("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=nav.mainMenu)
        await state.finish()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await process_start_command(message)

#Admin panel
@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    with sq.connect('sq_baze/Admin/admin.db') as con:
        cur = con.cursor()
        people_id = message.chat.id
        cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))
        data = cur.fetchone()
        if data is None:
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!')
            await AdminStates.pass_state.set()
        else:
            await bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=nav.adminPanel)

#FSM password
@dp.message_handler(state=AdminStates.pass_state)
async def save_admin(message: types.Message, state: FSMContext):
    if message.text == Admin_Password:
            await bot.send_message(message.chat.id,'–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
            await admin_panel_menu(message)
            await state.finish()
    else:
        await bot.send_message(message.chat.id,'–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
        await state.finish()

#Welcom Admin panel
async def admin_panel_menu(message: types.Message):
    with sq.connect('sq_baze/Admin/admin.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER PRIMARY KEY,
            name TEXT,
            last_name TEXT
        )""")
        con.commit()

        people_id = message.chat.id
        cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))

        data = cur.fetchone()
        if data is None:
            user_data = (message.chat.id, message.from_user.first_name, message.from_user.last_name)
            cur.execute("INSERT INTO users VALUES (?, ?, ?);", user_data)
            con.commit()

    await bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=nav.adminPanel)

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text == "‚úçÔ∏è–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_application(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    with sq.connect('sq_baze/Admin/admin.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER PRIMARY KEY,
            name TEXT,
            last_name TEXT
        )""")
        con.commit()

        people_id = message.chat.id
        cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))
        data = cur.fetchone()
        if data is None:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
        else:
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞ "+"!')
            await AdminStates.createTovar.set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=AdminStates.createTovar)
async def save_phone_number(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if re.match(r"^\+\d+$", message.text):
        async with state.proxy() as data:
            data['phone_number'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!')
        await AdminStates.createApplication.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    else:
        await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.')
        await state.finish()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.message_handler(state=AdminStates.createApplication)
async def save_application(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        numberClient = data.get('numberClient')
        phone_number = data.get('phone_number')  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        # if numberClient is None or phone_number is None:
        #     await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        #     await state.finish()
        #     #return

        data['nameTovar'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        itog = Rn.generate_string_with_conditions()
        await bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä: ' + str(itog))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        info_application = (itog, phone_number, message.text, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
        with sq.connect('sq_baze/Application/applications.db') as con:
            cur = con.cursor()
            cur.execute("INSERT INTO application (applicationNumber, numberCustomer, nameTovar, status) VALUES (?, ?, ?, ?);", info_application)
            cur.execute("INSERT INTO history (applicationNumber, numberCustomer, nameTovar) SELECT applicationNumber, numberCustomer, nameTovar FROM application WHERE NOT EXISTS (SELECT 1 FROM history WHERE history.applicationNumber = application.applicationNumber)")
            con.commit()

        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É? –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É".')
        await state.finish()       

# History application
@dp.message_handler(lambda message: message.text == "üóí–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
async def create_an_application(message: types.Message):
        with sq.connect('sq_baze/Admin/admin.db') as con:
            cur = con.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS users(
                id INTEGER PRIMARY KEY,
                name TEXT,
                last_name TEXT
            )""")
            con.commit()

            people_id = message.chat.id
            cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))

            data = cur.fetchone()
            if data is None:
                await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
            else:
                with sq.connect('sq_baze/Application/applications.db') as con:
                    cur = con.cursor()
                    cur.execute("SELECT applicationNumber, numberCustomer, nameTovar FROM history")
                    rows = cur.fetchall()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã PrettyTable
                table = PrettyTable()

                table.field_names = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]
                table.align = "l"  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
                for row in rows:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏
                    applicationNumber, numberCustomer, nameTovar = map(str, row)
                    table.add_row([applicationNumber, numberCustomer, nameTovar])

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode='Markdown')

#Change application status
@dp.message_handler(lambda message: message.text == "üñä–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
async def list_of_active_applications(message: types.Message):
            with sq.connect('sq_baze/Admin/admin.db') as con:
                cur = con.cursor()
                cur.execute("""CREATE TABLE IF NOT EXISTS users(
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    last_name TEXT
                )""")
                con.commit()

                people_id = message.chat.id
                cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))

                data = cur.fetchone()
                if data is None:
                    await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
                else:
                    with sq.connect('sq_baze/Application/applications.db') as con:
                        cur = con.cursor()

                        cur.execute("SELECT applicationNumber, numberCustomer, nameTovar, status FROM application WHERE status IN ('–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤')")
                        rows = cur.fetchall()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            table = PrettyTable()
                
            table.field_names = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°—Ç–∞—Ç—É—Å"]
            table.align = "l"  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            for row in rows:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏
                applicationNumber, numberCustomer, nameTovar, status = map(str, row)
                table.add_row([applicationNumber, numberCustomer, nameTovar, status])

            #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode='Markdown')
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å!')
            await AdminStates.change_application.set()

@dp.message_handler(state=AdminStates.change_application)
async def save_change_application(message: types.Message, state: FSMContext):
    order_number = message.text.strip()
    async with state.proxy() as data:
        data['order_number'] = order_number
    with sq.connect('sq_baze/Application/applications.db') as con:
        cur = con.cursor()
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SELECT —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        cur.execute("SELECT applicationNumber, numberCustomer, nameTovar, status FROM application WHERE applicationNumber = ?", (order_number,))
        result = cur.fetchone()
        if result:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table = PrettyTable()
            table.field_names = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°—Ç–∞—Ç—É—Å"]
            table.add_row(result)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode='Markdown')
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
            await bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–∫–∞–∑–æ–º?', reply_markup=nav.change_status)
            await AdminStates.change_status_one.set()
        else:
            await bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await state.finish()

#FSM change application ready
@dp.message_handler(lambda message: message.text == "üì´–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω'", state=AdminStates.change_status_one)
async def save_change_itog_otdan(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        order_number = data.get('order_number')
    if order_number:
        new_status = '–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω'
        with sq.connect('sq_baze/Application/applications.db') as con:
            cur = con.cursor()
            cur.execute("UPDATE application SET status = ? WHERE applicationNumber = ?", (new_status, order_number))
            if cur.rowcount == 0:
                await bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                con.commit()
                await bot.send_message(message.chat.id, '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω"')
        await state.finish()
    else:
        await bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        await state.finish()

@dp.message_handler(lambda message: message.text == "üì¨–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤'", state=AdminStates.change_status_one)
async def save_change_ready(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        order_number = data.get('order_number')
    if order_number:
        new_status = '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤'
        with sq.connect('sq_baze/Application/applications.db') as con:
            cur = con.cursor()
            cur.execute("UPDATE application SET status = ? WHERE applicationNumber = ?", (new_status, order_number))
            if cur.rowcount == 0:
                await bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                con.commit()
                await bot.send_message(message.chat.id, '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤"')
        await state.finish()
    else:
        await bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        await state.finish()

#Change active application
@dp.message_handler(lambda message: message.text == "üìä–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
async def list_of_active_applications(message: types.Message):
    with sq.connect('sq_baze/Admin/admin.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER PRIMARY KEY,
            name TEXT,
            last_name TEXT
            )""")
        con.commit()

        people_id = message.chat.id
        cur.execute("SELECT id FROM users WHERE id = ?", (people_id,))

        data = cur.fetchone()
        if data is None:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
        else:
            with sq.connect('sq_baze/Application/applications.db') as con:
                cur = con.cursor()
                cur.execute("SELECT applicationNumber, numberCustomer, nameTovar, status FROM application WHERE status IN ('–í –ø—Ä–æ—Ü–µ—Å—Å–µ','–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤')")
                rows = cur.fetchall()

        table = PrettyTable()

        table.field_names = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"]
        table.align = "l"  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        for row in rows:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏
            applicationNumber, numberCustomer, nameTovar, status = map(str, row)
            table.add_row([applicationNumber, numberCustomer, nameTovar, status])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?"
@dp.message_handler(lambda message: message.text == "üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?")
async def location(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    lat = 55.648123
    lon = 37.537254
    location = Location(latitude=lat, longitude=lon)
    await bot.send_location(message.chat.id, latitude=lat, longitude=lon)
    await message.reply("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –ë–µ–ª—è–µ–≤–æ —É–ª. –ë—É—Ç–ª–µ—Ä–æ–≤–∞ –¥ 24")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç"
@dp.message_handler(lambda message: message.text == "üßæ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def send_file(message: types.Document):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
    await message.reply_document(open('photo\\price.pdf', 'rb'))

@dp.message_handler(lambda message: message.text == "‚òùüèª –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç")
async def send_file(message: types.Document):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
    await message.reply_document(open('photo\\work.pdf', 'rb'))

@dp.message_handler(lambda message: message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def process_start_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
    await message.reply("–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 968 828-60-67")

@dp.message_handler(lambda message: message.text == "‚è≥ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
async def process_status_application(message: types.Message):
    with sq.connect('sq_baze/Application/applications.db') as con:
        cur = con.cursor()
        cur.execute("SELECT applicationNumber, nameTovar, status FROM application WHERE status IN ('–í –ø—Ä–æ—Ü–µ—Å—Å–µ','–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤')")
        rows = cur.fetchall()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        table = PrettyTable()

        table.field_names = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"]
        table.align = "l"  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        for row in rows:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫–∏
            applicationNumber, nameTovar, status = map(str, row)
            table.add_row([applicationNumber, nameTovar, status])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(message.chat.id, f"```\n{table}\n```", parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == "üìù –û—Ç–∑—ã–≤—ã")
async def process_start_command(message: types.Message):
    with sq.connect('sq_baze/Feedback/feedbacks.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS feedback(
        id INTEGER,
        last_name TEXT,
        first_name TEXT,
        feedbackClient TEXT
        )""")
        con.commit()

    await message.reply("–¢—É—Ç –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –æ—Ç–∑—ã–≤—ã, –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π!", reply_markup=nav.reviewsMenu)

@dp.message_handler(lambda message: message.text == "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def process_start_command(message: types.Message):
    with sq.connect('sq_baze/Feedback/feedbacks.db') as con:
        cur = con.cursor()
        cur.execute("SELECT id FROM feedback")
        con.commit()
        data = cur.fetchall()
        if not data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            await bot.send_message(message.chat.id, '–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç!')
        else:
            cur.execute("SELECT feedbackClient FROM feedback")  # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            rows = cur.fetchall()

            feedback_message = ""
            for row in rows:
                feedback = row[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ feedbackClient - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                feedback_message += f"{feedback}\n------------------------------------------------------------------------------------------------------\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
            if feedback_message.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.send_message(message.chat.id, feedback_message, parse_mode='Markdown')
            else:
                await bot.send_message(message.chat.id, '–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç!')

@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤")
async def process_start_command(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    # async with state.proxy() as data:
    #         data['review_text'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await MyStates.waiting_for_review.set()

@dp.message_handler(state=MyStates.waiting_for_review)
async def create_feedback(message: types.Message, state: FSMContext):
    with sq.connect('sq_baze/Feedback/feedbacks.db') as con:
        # async with state.proxy() as data:
        #     # –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ
        #     some_data = data.get('review_text')
        some_data = message.text
        user_text = (message.chat.id, message.from_user.last_name, message.from_user.first_name, some_data)
        cur = con.cursor()
        cur.execute("INSERT INTO feedback (id, last_name, first_name, feedbackClient) VALUES (?,?,?,?)", user_text)
        con.commit()
        await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
        await state.finish()

@dp.message_handler(lambda message: message.text == "‚Ü© –ù–∞–∑–∞–¥")
async def process_start_command(message: types.Message):
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)

@dp.message_handler(lambda message: message.text == "üîô–ù–∞–∑–∞–¥")
async def process_start_command(message: types.Message):
    await message.reply("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=nav.adminPanel)

@dp.message_handler()
async def bot_message(message: types.Message):
    result = []
    if message.text == 'üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?':
        await message.reply("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –ë–µ–ª—è–µ–≤–æ —É–ª. –ë—É—Ç–ª–µ—Ä–æ–≤–∞ –¥ 24")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
